---
import Canvas from "../components/canvas.astro"
import StartButton from "../components/start-button.astro"
---
<Canvas id="canvas-static" label="EstÃ¡tico">
  <StartButton id="start-static-button" />
</Canvas>
<script>
  import anime from "animejs";
  import { arrayLimit, animStarted } from "./shared.store"
  import { createNode } from "../utils/Node";

  let canvas = document.getElementById("canvas-static") as HTMLElement;
  let width = canvas.clientWidth;
  let height = canvas.clientHeight;

  let limit = arrayLimit.get();
  let size = 100; // node size

  let offsetPerNode = size + 2 // +2 cause of the border
  let offsetLeft = (width - (offsetPerNode * limit)) / 2;
  let offsetTop = (height - offsetPerNode) / 2;

  // adjust start button position
  let button = document.getElementById("start-static-button") as HTMLButtonElement;
  let w = button.clientWidth;
  let h = button.clientHeight;
  button.style.position = "absolute";
  button.style.left = `${(width - w) / 2}px`;
  button.style.top = `${((height - h) / 2)}px`;

  // create nodes
  let nodesClassName = "static-mem-node-slot";
  for(let i=0; i < limit; i++) {
    let slot = createNode({
      id: `static-mem-node-slot-${(i+1).toString()}`,
      className: nodesClassName,
      style: {
        opacity: "0",
        size: `${size}px`,
        top: `${offsetTop + height / 20}px`,
        left: `${offsetLeft + (i * offsetPerNode)}px`,
        backgroundColor: "#dfdfdf"
      },
      innitialValue: "0",
    });
    canvas.appendChild(slot);
  }

  animStarted.subscribe(started => {
    if (!started) {
      anime({
        targets: "#start-static-button",
        opacity: {
          value: "1",
          easings: "easeOutSine",
          delay: 250,
          duration: 1250,
        }
      });
      button.addEventListener("click", (_) => animStarted.set(true));
    };
    if (started) {
      let tl = anime.timeline({});
      tl.add({
        targets: "#start-static-button",
        opacity: {
          value: "0",
          easings: "easeOutSine",
          duration: 250
        }
      });
      button.remove();
      tl.add({
        targets: `.${nodesClassName}`,
        opacity: {
          value: "1",
          easings: "easeOutSine",
          delay: 250,
          duration: 1250,
        },
        complete: function(anim) {
          console.log("Completed");
        }
      });
    }
  });
</script>
