---
import Canvas from "../shared/canvas.astro"
---
<div class="input-line">
  <input id="input-static-node" autocomplete="off" maxlength="10"/>
</div>
<style>
  .input-line {
    width: 100%;
    display: flex;
    flex-direction: row;
    justify-content: center;
    padding-bottom: 10px;
  }
  input {
    border: solid var(--secondary) 0.5px;
    border-radius: 8px;
    color: var(--secondary);
    font-size: 20px;
    padding-left: 8px;
    align-self: center;
  }
</style>

<Canvas id="static-node-canvas" height="240px" />

<script>
  import anime from "animejs";
  import { createNode, createBin } from "./utils/Node";
  import { inputValue } from "./stores/node-example.store";

  let canvas = document.getElementById("static-node-canvas") as HTMLElement;
  let width = canvas.clientWidth;
  let height = canvas.clientHeight;

  // insert node on canvas
  let size = 120; // node size
  let offsetPerNode = size + 2 // +2 cause of the border
  let offsetBinLeft = (width - (2 * offsetPerNode)) / 3;
  let offsetNodeLeft = offsetBinLeft * 2 + offsetPerNode;
  let offsetTop = (height - offsetPerNode) / 2;

  let node = createNode({
    id: "static-node-example-1",
    className: "static-node-example",
    style: {
      size: `${size}px`,
      opacity: "1",
      top: `${offsetTop}px`,
      left: `${offsetNodeLeft}px`,
      backgroundColor: "#f1f1f1",
    },
    innitialValue: inputValue.get(),
  });
  node.style.cursor = "default";
  canvas.appendChild(node);

  let [
    binElem,
  ] = createBin({
    id: "bin_example",
    style: {
      size: `${size}px`,
      top: `${offsetTop}px`,
      left: `${offsetBinLeft}px`
    }
  });
  canvas.appendChild(binElem);

  let inputElem = document.getElementById("input-static-node") as HTMLInputElement;
  inputElem.addEventListener("keydown", (e) => {
    let code = e.key;
    let input = e.target as any;
    let start = input.selectionStart as number;
    let end = input.selectionEnd as number;

    let value = inputElem.value;
    let len = value.length;

    let allowedKeys = ["Shift", "Control", "ArrowLeft", "ArrowRight"];
    if (allowedKeys.includes(code)) return;

    // Prevent being empty when perform a delete
    if (code == "Backspace" || code == "Delete") {
      if (len == 1 || (end - start) == len) {
        e.preventDefault();
        inputElem.value = "0";
        inputValue.set("0");
        return;
      } else if (end != start) {
        e.preventDefault();
        let splited = value.split("");
        let newValue: string = ([] as string[]).concat(splited.slice(0, start), splited.slice(end)).join("");
        inputElem.value = newValue;
        inputValue.set(newValue);
        return;
      } else {
        e.preventDefault();
        let splited = value.split("");
        let newValue: string = ([] as string[]).concat(splited.slice(0, start - 1)).join("");
        inputElem.value = newValue;
        inputValue.set(newValue);
        return;
      }
    }

    // Prevent Letters or Symbols
    if (isNaN(parseInt(code))) {
      // this is the problem
      e.preventDefault();
      return;
    }
  });
  inputElem.addEventListener("input", (e: any) => {
    if (e.data === null) return;
    let newV = parseInt(inputElem.value);
    let maxValue = 4294967295;
    let newValue = Math.min(newV, maxValue);
    inputElem.value = newValue.toString();
    inputValue.set(newValue.toString());
  });
  inputElem.addEventListener("paste", (e) => e.preventDefault());

  inputValue.subscribe((value, oldValue) => {
    node.innerText = value;
    if (inputElem.value != value) inputElem.value = value;
    // if (oldValue == undefined) oldValue = "0";

    let newStringBinary = (parseInt(value) >>> 0).toString(2).padStart(32, "0");
    let newSplited = newStringBinary.split("");

    if (oldValue == undefined) {
      // numbers appearing no need to check for diffs
      let toAppear: string[] = [];

      for (let i = 0; i < newSplited.length; i++) {
        let byte = Math.floor(i / 8);
        let bit = i - Math.floor(i / 8) * 8;
        if (newSplited[i] == "0")
          toAppear.push(`#bin_digits_${byte}_${bit}_0`);
        else if (newSplited[i] == "1")
          toAppear.push(`#bin_digits_${byte}_${bit}_1`);
      }

      anime({
        targets: toAppear,
        opacity: [0, 1],
        duration: 500,
        easing: 'easeInOutQuad'
      });
    } else {
      // needs to get diffs from old to new
      // get diffs in format toDisappear and to Appear
      // then animate
      let oldStringBinary = (parseInt(oldValue) >>> 0).toString(2).padStart(32, "0");
      let oldSplited = oldStringBinary.split("");

      let toDisappear:  string[] = [];
      let toAppear:  string[] = [];

      for (let i = 0; i < newSplited.length; i++) {
        let byte = Math.floor(i / 8);
        let bit = i - Math.floor(i / 8) * 8;
        if (oldSplited[i] != newSplited[i]) {
          if (oldSplited[i] == "0") {
            toDisappear.push(`#bin_digits_${byte}_${bit}_0`);
            toAppear.push(`#bin_digits_${byte}_${bit}_1`);
          } else {
            toDisappear.push(`#bin_digits_${byte}_${bit}_1`);
            toAppear.push(`#bin_digits_${byte}_${bit}_0`);
          }
        }

        anime({
          targets: toDisappear,
          opacity: [1, 0],
          duration: 500,
          easing: 'easeInOutQuad'
        });

        anime({
          targets: toAppear,
          opacity: [0, 1],
          duration: 500,
          easing: 'easeInOutQuad'
        });

      }
    }
  });
</script>
